version: 2.1

executors:
  python-executor:
    working_directory: ~/code
    machine:
      docker_layer_caching: false
      image: "ubuntu-1604:201903-01"

commands:
  save-eggs-cache:
    description: "Save the .eggs directory after tests"
    steps:
      - save_cache:
          key: v1-test-eggs-cache-{{ checksum "app/requirements.txt" }}-{{ checksum "app/test_requirements.txt" }}
          paths:
            - ~/code/.eggs
  restore-eggs-cache:
    description: "Load .eggs cache"
    steps:
      - restore_cache:
          keys:
            - v1-test-eggs-cache-{{ checksum "app/requirements.txt" }}-{{ checksum "app/test_requirements.txt" }}
  save-venv-cache:
    description: "Save the virtualenv"
    steps:
      - save_cache:
          key: v1-cache-{{ checksum "app/requirements.txt" }}-{{ checksum "app/test_requirements.txt" }}
          paths:
            - ~/code/venv
  restore-venv-cache:
    description: "Restore the virtualenv"
    steps:
      - restore_cache:
          keys:
            - v1-cache-{{ checksum "app/requirements.txt" }}-{{ checksum "app/test_requirements.txt" }}

  install-apt-reqs:
    description: Install prequisite apt packages
    steps:
      - run:
          name: Wait for apt to become available
          command: |
            START_TIME=$SECONDS
            echo "Waiting for apt-get to become available"
            while fuser /var/lib/dpkg/lock >/dev/null 2>&1 ; do echo "."; sleep 1; done
            ELAPSED_TIME=$(($SECONDS - $START_TIME))
            echo "Waiting done, took $(($ELAPSED_TIME/60)) min $(($ELAPSED_TIME%60)) sec"
      - run:
          name: Update apt
          command:  sudo killall -9 apt-get || true && sudo apt-get update
      - run:
          name: Install prequisite apt packages
          command:  sudo killall -9 apt-get || true && sudo apt-get -y --no-install-recommends install libpq-dev python-dev

  run-test:
    description: "Run a group of tests, ie 'formatting'."
    parameters:
      for:
        type: string
        default: all
    steps:
      - checkout
      - restore-venv-cache
      - restore-eggs-cache
      - run:
          name: Test
          command: |
            cd app
            pwd
            source ~/code/venv/bin/activate
            python setup.py test<< parameters.for >>
#      - run:
#          name: Move coverage report to workspace
#          command: |
#            mkdir /tmp/coverage-reports
#            mv ./coverage.xml /tmp/coverage-reports/<< parameters.for >>-coverage.xml
#      - persist_to_workspace:
#          root: /tmp/coverage-reports
#          paths:
#            - ./*-coverage.xml
#      - save-eggs-cache
#  upload-coverage-reports:
#    description: "Upload the coverage reports"
#    steps:
#      - checkout
#      - attach_workspace:
#          at: /tmp/coverage-reports
#      - run:
#          name: "Upload coverage reports"
#          command: |
#            cp /tmp/coverage-reports/*.xml .
#            bash <(curl -s https://codecov.io/bash)

jobs:

  # Make documentation
  build-docs:
    machine:
      docker_layer_caching: false
    environment:
      PROD_MODE: true
    steps:
      - checkout
      - run:
          name: Make documentation
          command: make build-docs

  # Build the docker images this project uses.
  build-images:
    machine:
      docker_layer_caching: false
    steps:
      - checkout
      - run:
          name: Build Images
          command: |
            make info
            make build-executor
#            make build-scheduler

  # Push images, only when on master and/or tagged commits.
  push-images:
    machine:
      docker_layer_caching: false
    environment:
      PROD_MODE: true
    steps:
      - checkout
      - run:
          name: Push Images
          command: |
            make info
            make push-executor
#            make push-scheduler

  # Publish to PyPi, only on tagged commits.
  publish-to-pypi:
    executor: python-executor
    steps:
      - checkout
      - restore-venv-cache
      - run:
          name: Build
          command: |
            source ~/code/venv/bin/activate
            python setup.py sdist
            python setup.py bdist_wheel
      - run:
          # Requires TWINE_PASSWORD to be set.
          name: Publish
          command: |
            source ~/code/venv/bin/activate
            python -m pip install twine
            twine upload -u statoil-travis --skip-existing dist/*

  # Install step, before any tests are run to create the cache
  install:
    executor: python-executor
    steps:
      - install-apt-reqs
      - checkout
      - restore-venv-cache
      - run:
          name: Set Python Version
          command: |
            pyenv versions
            pyenv global 3.7.0
            pyenv versions
      - run:
          name: Virtual Environment
          command: |
            python -m venv ~/code/venv
            echo "source ~/code/venv/bin/activate" >> $BASH_ENV
      - run: pip install --upgrade pip
      - run:
          name: Install Requirements
          command: |
            echo $(which python)
            pwd
            pip install -r app/requirements.txt
      - run:
          name: Test Requirements
          command: |
            echo $(which python)
            pip install -r app/test_requirements.txt
      - save-venv-cache

  # Specific collections of python tests
  test-unit:
    executor: python-executor
    steps:
      - run-test:
          for: unit

  upload-coverage-reports:
    executor: python-executor
    steps:
      - upload-coverage-reports

workflows:
  version: 2.1

  # Run all tests, ensure images and docs can be built
  test:
    jobs:
      - build-docs
      - install
      - test-unit:
          requires:
            - install
# COMMENTED OUT FOR NOW. COMMENT BACK IN WHEN WE GET COINS IN CIRCLECI
# NOTE: REMEMBER TO UNCOMMNENT REFERENEC in push-images AS WELL
#      - build-images:
#          filters:
#            branches:
#              only: /.*/
#            tags:
#              only: /.*/
#      - upload-coverage-reports:
#          requires:
#            - test-unit
#          filters:
#            branches:
#              only: /.*/
#            tags:
#              only: /.*/
      - push-images:
          requires:
#            - build-images
            - test-unit
#            - upload-coverage-reports
          filters:
            branches:
              only:
                - master
            tags:
              only: /.*/
#      - publish-to-pypi:
#          requires:
#            - push-images
#          filters:
#            branches:
#              ignore: /.*/
#            tags:
#               only: /.*/
